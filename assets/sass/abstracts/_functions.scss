//
// Override rgba() to allow CSS variable to have transparency
//
@function rgba( $r, $g, $b: false, $a: false ) {
  @if type-of( $r ) == string {
    @return rgbA(var($r + 'RGB'), $g);
  }

  @if type-of( $r ) == color {
    @return rgbA( red($r), green($r), blue($r), $g );
  }

  @if $b and $a {
    @return rgbA( $r, $g, $b, $a );
  }
}

// -------------
// Media Query
// -------------

// Media query for below or equal the size
@function below( $size-px ) {
  @return "max-width: #{$size-px}";
}

// Media query for above the size
@function above( $size-px ) {
  @return "min-width: #{$size-px}";
}

// -----------
// ASSET URL
// -----------

@function font-url( $file ) {
  @return url( $font-url + $file);
}

@function image-url( $file ) {
  @return url( $image-url + $file);
}


// -------------
// EM CONVERTER
// -------------

// Convert PX value to EM
//
// Usage:
//   font-size: em( 20px );
//   padding: em( 8px 16px 12px );
// Result:
//   font-size: 1.25em;
//   padding: em( 0.5em 1em 0.75em );

@function em($values, $base: $font-size) {
  // if only contain single number, convert it directly
  @if type-of($values) == number {
    @return _convertToEm($values, $base);
  }

  // if contains multiple values, loop through it
  $emValues   : ();
  @each $val in $values {
    $emValues: append($emValues, _convertToEm($val, $base) );
  }
  @return join((), $emValues, space );
}

// Strips unit and return plain number
@function _stripUnit($num) {
  @return $num / ($num * 0 + 1);
}

// Convert the number to EM
@function _convertToEm($value, $base: $font-size) {
  // if not number, return it as is
  @if type-of($value) != number { @return $value; }

  $value: _stripUnit($value) / _stripUnit($base) * 1em;
  // turn 0em into 0
  @if ($value == 0em) {
    $value: 0;
  }
  @return $value;
}